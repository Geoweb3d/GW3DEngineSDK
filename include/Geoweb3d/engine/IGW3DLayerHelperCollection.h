//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../core/GW3DInterFace.h"
#include "../core/IGW3DCollection.h"

/* Primary namespace */
namespace Geoweb3d
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Collection of  layers adding/removal. </summary>
	///
	/// <remarks>	A collection of  layers with the capability to add and remove
	/// 			 layers. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct  GW3D_DLL IGW3DLayerHelperCollection : public IGW3DCollection< IGW3DLayerWPtr >
	{
		virtual ~IGW3DLayerHelperCollection() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="index"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DLayerWPtr get_AtIndex(unsigned long) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="index"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DLayerWPtr operator[](unsigned long index) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Adds a  layer. </summary>
		///
		/// <param name="layer">	The  layer. </param>
		///
		/// <returns>	GW3D_sOk if succeeded. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult add(IGW3DLayerWPtr layer) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Removes a  layer. </summary>
		///
		/// <param name="layer">	The  layer. </param>
		///
		/// <returns>	GW3D_sOk if succeeded. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult remove(IGW3DLayerWPtr layer) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		enum SortMode
		{
			/// Sorts the list so highest level of detail layers is first.
			RESOLUTION = 0,
			INSERTION_ORDERING = 1,
			REVERSE_INSERTION_ORDERING = 2
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sorts the collection. </summary>
		///
		/// <param name="sort_mode">	The sorting algorithm. </param>
		///
		/// <returns>	GW3D_sOk if succeeded. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult set_SortMode(SortMode sort_mode= SortMode::RESOLUTION) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get the current sorting mode for this container. </summary>
		///
		/// <returns>	The current SortMode </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual SortMode get_SortMode() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Will return the derived object if a raster layer.  This is more of general utility
		/// as casting to the derived smart pointer is not available external to the engine. </summary>
		///
		/// <param name="layer"> The layer. </param>
		///
		/// <returns>	The Raster Layer object. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DRasterLayerWPtr is_GW3DRasterLayer(IGW3DLayerWPtr layer) = 0;
	};
}