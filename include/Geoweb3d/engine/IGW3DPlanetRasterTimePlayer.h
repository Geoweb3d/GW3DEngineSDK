//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../core/GW3DInterFace.h"

namespace Geoweb3d
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	IGW3DPlanetRasterTimePlayer is used to control planet time, as pertaining 
	///             to the rendering of imagery overlay representations. </summary>
	///
	/// <remarks>	IGW3DPlanetRasterTimePlayer can be retrieved by registering a IGW3DTimeController 
	///             with the Planet. </remarks>
	/// 
	/// <see cref="IGW3DGeoweb3dSDK::RegisterRasterTimeControllerWithPlanet"/>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DPlanetRasterTimePlayer
	{
		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		enum PlanetRasterTimePlayerState
		{
			PLAY = 1,
			PLAY_AND_REPEAT = 2,
			//This next option will only play the time slices that have complete loaded coverage on the globe.
			//PLAY_AND_REPEAT_COVERAGE will replay once it encounters the first time slice id that has incomplete 
			//coverage
			PLAY_AND_REPEAT_COVERAGE = 3,
			PAUSE = 4,
			STOP = 5
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Enable controlling of Imagery Overlay time with this player. </summary>
		///
		/// <param name="enable"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_Enabled(bool enable) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Get the current enable state of the player. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool get_Enabled() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Seek forward to next time stamp. </summary>
		///
		/// <remarks>   Will stop seeking at the last slice. </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool put_SeekForward() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Seek backwards to previous tIme xlice </summary>
		///
		/// <remarks> Will stop seeking once at the starting slice.  </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool put_SeekBackwards() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the player state. </summary>
		///
		/// <remarks> Seeking also works while in any state.  </remarks>
		///
		/// <param name="state"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_PlayerState(PlanetRasterTimePlayerState state = PlanetRasterTimePlayerState::STOP) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the current player state. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual PlanetRasterTimePlayerState get_PlayerState() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Sets the playback speed. </summary>
		///
		/// <remarks> Playback is currently frame based. After so many draw frames the player will essentially
		/// auto seek to the next time stamp. The current default is 30 draw frames before the next time stamp is changed. </remarks>
		///
		/// <param name="frames_per_image"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_Speed(unsigned int frames_per_image) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Gets the current playback speed. </summary>
		///
		/// <remarks> Playback is currently frame based. After so many draw frames the player will essentially
		/// auto seek to the next time stamp. </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual unsigned int get_Speed() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Adjusts alpha blend of the Imagery Overlay Representation. </summary>
		///
		/// <remarks>	Current default is 1.0 - fully opaque.  </remarks>
		///
		/// <param name="alpha"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_Alpha(float alpha) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Get the current alpha blend setting of the Imagery Overlay Representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual float get_Alpha() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Get the starting time slice ID.  </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual unsigned long get_StartTimeId() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Get the last time slice ID. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual unsigned long get_EndTimeId() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Set the current time slice Id.  </summary>
		///
		/// <param name="time_id"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult set_CurrentTimeId(unsigned long time_id) = 0;
	};
}