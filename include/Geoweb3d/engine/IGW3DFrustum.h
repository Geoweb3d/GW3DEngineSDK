//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../core/GW3DInterFace.h"

/* Primary namespace */
namespace Geoweb3d
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A frustum </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct  GW3D_DLL IGW3DFrustum
	{
		virtual ~IGW3DFrustum(){}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <param name="lp"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_LeftPlane(const double& lp) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_LeftPlane() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <param name="rp"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_RightPlane(const double& rp) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_RightPlane() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <param name="bp"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_BottomPlane(const double& bp) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_BottomPlane() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <param name="tp"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_TopPlane(const double& tp) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_TopPlane() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <param name="np"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_NearPlane(const double& np) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_NearPlane() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <param name="fp"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_FarPlane(const double& fp) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		/// 
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_FarPlane() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	put_FrustumHelper will fill in the plane settings, making it so
		///				you don't have to figure out the top/bottom,right, and left plane. </summary>
		///
		/// <remarks>	FieldOfView: field of view angle (degrees)
		/// 			AspectRatio: of width/height
		/// 			NearPlane: near plane distance from origin point (meters)
		/// 			FarPlane: far plane distance from origin point (meters) </remarks>
		///
		/// <param name="FieldOfView"> TODO </param>
		/// <param name="AspectRatio"> TODO </param>
		/// <param name="NearPlane"> TODO </param>
		/// <param name="FarPlane"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_FrustumHelper(const double& FieldOfView, const double& AspectRatio, const double& NearPlane, const double& FarPlane) = 0;
	};
}