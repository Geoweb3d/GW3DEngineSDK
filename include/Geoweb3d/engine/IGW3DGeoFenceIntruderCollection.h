//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../core/GW3DInterFace.h"
#include "../core/IGW3DCollection.h"
#include "GW3DExports.h"

/* Primary namespace */
namespace Geoweb3d
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	///
	/// <see cref="IGW3DWindow"/>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	enum GeoFenceStatus
	{
		START_PAGING = 0,
		STOP_PAGING,
		TILE_START_PAGING,
		TILE_STOP_PAGING,
		TILE_GEOFENCE_START,
		TILE_GEOFENCE_END,
		GEOFENCE_DIRTY,
		TEMP
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct  GW3D_DLL IGW3DIntruderCallback
	{
		virtual ~IGW3DIntruderCallback() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="geo_fence_status"> TODO </param>
		/// <param name="frame_stamp"> TODO </param>
		/// <param name="tile_id"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void statusOfGeoFenceSubscribers(GeoFenceStatus geo_fence_status, const unsigned long& frame_stamp, const uint64_t& tile_id = 0) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct  GW3D_DLL IGW3DGeoFenceIntruderCollection : public IGW3DCollection< IGW3DGeoFenceIntruderWPtr >
	{
		virtual ~IGW3DGeoFenceIntruderCollection() {}

#ifndef SWIGGING

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="index"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DGeoFenceIntruderWPtr operator[](unsigned long index) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="index"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DGeoFenceIntruderWPtr get_AtIndex(unsigned long index) const = 0;

#endif //SWIGGING

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="name"> TODO </param>
		/// <param name="use_grid"> TODO </param>
		/// <param name="cb"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGeoFenceIntruderWPtr create(const char* name, bool use_grid, IGW3DIntruderCallback* cb) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="geo_fence_intruder"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		static void close(IGW3DGeoFenceIntruderWPtr& geo_fence_intruder)
		{
			close_GeoFenceIntruder(geo_fence_intruder);
		}
	};
}