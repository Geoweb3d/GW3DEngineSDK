//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include <Geoweb3dCore/Geoweb3dExports.h>
#include <Geoweb3dCore/GW3DResults.h>

namespace Geoweb3d
{
	class IGW3DTAKClientCallback;
	struct IGW3DVectorDataSource;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	class GW3D_DLL IGW3DTAKClientContext
	{
		public:

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> TODO </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			enum class AltitudeType : unsigned int
			{
				MSL = 0,
				AGL
			};

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> TODO </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			enum class Team : unsigned int
			{
				White = 0,
				Yellow,
				Orange,
				Magenta,
				Red,
				Maroon,
				Purple,
				Dark_Blue,
				Blue,
				Cyan,
				Teal,
				Green,
				Dark_Green,
                Brown,

                // Add new colors above here
                END_TEAM
			};

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> TODO </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			enum class Role : unsigned int
			{
				Team_Member = 0,
				Team_Lead,
				HQ,
				Sniper,
				Medic,
				Forward_Observer,
				RTO,
                K9,

                // Add new roles above here
                END_ROLE
			};

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> TODO </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			enum class ServerConnectionProtocol : int
			{
				Tcp = 0,
				SSL,
				// Add new protocols above here
				END_PROTOCOL
			};

		public:
			virtual ~IGW3DTAKClientContext() {}

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Sends a Chat message to a specific recipient. The call-sign and uid must exist in the current 
			///  TAK instance( ex. TAK server ). </summary>
			///
			/// <param name="receiver_callsign"> The call sign of the chat message recipient </param>
			/// <param name="receiver_uid"> The unique id (GUID) of the recipient.  </param>
			/// <param name="message">	Null terminated string containing the actual message text.</param>
			///
			/// <returns> TODO </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult sendChatMessage( const char* receiver_callsign, const char* receiver_uid, const char* message) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Send a mission package to a specific recipient. </summary>
			///
			/// <param name="receiver_callsign"> The call sign of the chat message recipient </param>
			/// <param name="receiver_uid"> The unique id (GUID) of the recipient.  </param>
			/// <param name="mission_package_filepath">	The absolute path to the mission package archive.</param>
			/// <param name="package_name"> User specified name for the package ( used by the server to further classify the package). </param>
			///
			/// <returns> TODO </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual GW3DResult sendMissionPackage( const char* receiver_callsign, const char* receiver_uid
													, const char* mission_package_filepath, const char* package_name ) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Set the user( contact ) position. </summary>
			///
			/// <param name="longitude"> User longitude. </param>
			/// <param name="latitude">	 User latitude.</param>
			/// <param name="altitude_meters">	 User altitude in meters. </param>
			/// <param name="altitude_type"> Classify the altitude value. This argument is currently unused. </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Position(const double longitude, const double latitude, const double altitude_meters, const AltitudeType altitude_type) = 0;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            /// <summary> Gets the user( contact ) position. </summary>
            ///
            /// <param name="longitude"> User longitude. </param>
            /// <param name="latitude">	 User latitude.</param>
            /// <param name="altitude_meters">	 User altitude in meters. </param>
            /// <param name="altitude_type"> Classifies the altitude value. This parameter is currently ignored. </param>
            ////////////////////////////////////////////////////////////////////////////////////////////////////

            virtual void get_Position(double& longitude, double& latitude, double& altitude_meters, AltitudeType& altitude_type) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Get the user( contact ) unique id. </summary>
			///
			/// <returns> TODO </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const char* get_Uid() = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Get the user( contact ) callsign. </summary>
			///
			/// <returns> TODO </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const char* get_Callsign() = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Get the user( contact ) team. </summary>
			///
			/// <returns> TODO </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const char* get_Team() = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Get the user( contact ) role. </summary>
			///
			/// <returns> TODO </returns>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual const char* get_Role() = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Set the user( contact ) callsign. </summary>
			///
			/// <param name="callsign"> TODO </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Callsign( const char* callsign ) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Set the user( contact ) team. </summary>
			///
			/// <param name="team"> TODO </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Team(const Team team) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> Set the user( contact ) role. </summary>
			///
			/// <param name="role"> TODO </param>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void put_Role(const Role role ) = 0;

			////////////////////////////////////////////////////////////////////////////////////////////////////
			/// <summary> TODO </summary>
			////////////////////////////////////////////////////////////////////////////////////////////////////

			virtual void forceUpdate() = 0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	///
	/// <param name="tak_vector_datasource"> TODO </param>
	/// <param name="client_callback"> TODO </param>
	///
	/// <returns> TODO </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3D_DLL IGW3DTAKClientContext* RegisterTAKClientCallback(IGW3DVectorDataSource* tak_vector_datasource, IGW3DTAKClientCallback* client_callback);

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	///
	/// <param name="tak_vector_datasource"> TODO </param>
	/// <param name="client_callback"> TODO </param>
	///
	/// <returns> TODO </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	GW3D_DLL void UnRegisterTAKClientCallback(IGW3DVectorDataSource* tak_vector_datasource, IGW3DTAKClientCallback* client_callback);	
}