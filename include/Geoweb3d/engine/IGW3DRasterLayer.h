//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../core/GW3DInterFace.h"
#include "../core/IGW3DLayer.h"
#include "IGW3DAsyncStatus.h"
#include "IGW3DRasterLayerEnvelopeStream.h"
#include "../../Geoweb3dCore/GeometryExports.h"

/* Primary namespace */
namespace Geoweb3d
{
	struct   IGW3DWebServiceConfiguration;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct GW3D_DLL IG3DRasterServiceConfigVisitor
	{
		virtual ~IG3DRasterServiceConfigVisitor() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="TODO"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void visit(IGW3DWebServiceConfiguration*) = 0;
	};

	struct GW3D_DLL IG3DRasterServiceConfiguration
	{
		virtual ~IG3DRasterServiceConfiguration() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> If something bad happened, like the network was disconnected, this object might not be configured
		/// and you may get bad information and null objects. </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool is_valid() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Used for our open APIs so that the user can save to disk what they just configured. </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_SerializeToXMLString() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="visitor"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void accept(IG3DRasterServiceConfigVisitor* visitor) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct GW3D_DLL IGW3DWebServiceConfiguration : public IG3DRasterServiceConfiguration
	{
		virtual ~IGW3DWebServiceConfiguration() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="filepath"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_CapabilitiesUrl(const char* filepath) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_CapabilitiesUrl() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="filepath"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_CachePath(const char* filepath) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_CachePath() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="expireseconds"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_CacheExpire(int expireseconds) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_CacheExpire() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="bytes"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_CacheMaxSize(int bytes) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_CacheMaxSize() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="numconnections"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_NetworkMaxConnections(int numconnections) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_NetworkMaxConnections() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="alwaysoffline"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_NetworkForceOffline(bool alwaysoffline) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool get_NetworkForceOffline() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="nosslcheck"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_NetworkAllowUnsecureConnection(bool nosslcheck) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool get_NetworkAllowUnsecureConnection() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> Delimited with a :  example, user:password </summary>
		///
		/// <param name="usernamepassword"> TODO </param>
		///
		/// <returns></returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_ConnectionUsernamePassword(const char* usernamepassword) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_ConnectionUsernamePassword() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="server_url"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_ServerUrl(const char* server_url) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_ServerUrl() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="layers"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Layers(const char* layers) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_Layers() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="styles"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Styles(const char* styles) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_Styles() const = 0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct GW3D_DLL IGW3DOverviewConfiguration
	{
		virtual ~IGW3DOverviewConfiguration() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="wgs84_env"> TODO </param>
		/// <param name="width"> TODO </param>
		/// <param name="height"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int BestOverviewLevel(const Geoweb3d::GW3DEnvelope& wgs84_env, int width, int height) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="level"> TODO </param>
		/// <param name="dppX"> TODO </param>
		/// <param name="dppY"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult GetOverviewDPP(int level, double& dppX, double& dppY)  const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int GetNumOverviews()  const = 0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Raster Layer. </summary>
	///
	/// <remarks>	Geoweb3d, 3/23/2020. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct GW3D_DLL IGW3DRasterLayer : public IGW3DLayer
	{
		virtual ~IGW3DRasterLayer() {}

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets native spatial reference. </summary>
		///
		/// <remarks>	Gets the native spatial reference of the datasource layer. </remarks>
		///
		/// <returns>	The native spatial reference. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DSpatialReferencePtr get_NativeSpatialReference() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets spatial reference. </summary>
		///
		/// <remarks>	Gets the current spatial reference of the layer. </remarks>
		///
		/// <returns>	The spatial reference. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DSpatialReferencePtr get_SpatialReference() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the spatial reference of the datasource layer. </summary>
		///
		/// <remarks>	This does not actually reproject the datasource layer into the given spatial reference.
		/// 			It is for specifying the spatial reference if none exists, or to override it
		/// 			if the native spatial reference is incorrect. </remarks>
		///
		/// <param name="spatialref">	The spatial reference. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void  put_SpatialReference(const IGW3DSpatialReferencePtr spatialref) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get the spatial envelope. </summary>
		///
		/// <remarks>	This will return the envelope in the WGS84 geographic coordinate system
		///				if put_SpatialReference was not set; otherwise, it will return the envelope 
		///				it the user defined reference. </remarks>
		///
		/// <returns>	The envelope. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DEnvelope get_Envelope() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets attribute definition collection. </summary>
		///
		/// <remarks>	The attribute field definition describes the names, types, etc. of the attribute
		/// 			fields. </remarks>
		///
		/// <param name="reset_next_iterator"> TODO </param>
		///
		/// <returns>	the attribute definition collection. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DDefinitionCollection* get_AttributeDefinitionCollection(bool reset_next_iterator = false) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the number of pixel along the x coordinate. </summary>
		///
		/// <returns>	The pixel width. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_Width() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the number of pixel along the y coordinate. </summary>
		///
		/// <returns>	The pixel height. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_Height() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the pixel size along the x coordinate. </summary>
		///
		/// <returns>	The pixel size (degrees). </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_PixelSizeX() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the pixel size along the y coordinate. </summary>
		///
		/// <returns>	The pixel size (degrees). </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_PixelSizeY() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the datasource layer description. </summary>
		///
		/// <returns>	The description </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DStringPtr get_Description() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Set the Client User Data. </summary>
		///
		/// <param name="client_data"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void set_ClientUserData(IGW3DClientUserDataPtr client_data) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the Client User Data.</summary>
		///
		/// <returns>	The Client User Data </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DClientUserDataPtr get_ClientUserData() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the raster band collection. </summary>
		///
		/// <remarks>	A collection of all the bands in the raster. </remarks>
		///
		/// <param name="reset_next_iterator"> TODO </param>
		///
		/// <returns>	the raster band collection. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const IGW3DRasterBandCollection* get_RasterBandCollection(bool reset_next_iterator = false) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	 the Raster Service Configuration object. </summary>
		///
		/// <remarks>	Currently this is used to get the XML for web service datasource layer. </remarks>
		///
		/// <returns>	IG3DRasterServiceConfigurationPtr  </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IG3DRasterServiceConfigurationPtr create_RasterServiceConfiguration() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	 The Overview Configuration. </summary>
		///
		/// <remarks>	Used to access an object that contains details about overviews.  </remarks>
		///
		/// <returns>	const IGW3DOverviewConfiguration*  </returns>

		virtual const IGW3DOverviewConfiguration* get_OverviewConfiguration() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Streams the Request set forth with IGW3DRasterLayerEnvelopeStream.  </summary>
		///
		/// <param name="request"> TODO </param>
		/// <param name="streamobj"> TODO </param>
		///
		/// <returns>	The Success of the created resources. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult StreamEnvelope(IGW3DRequest* request, IGW3DRasterLayerEnvelopeStream* streamobj ) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Streams the Request set forth with IGW3DRasterLayerEnvelopeStream.  </summary>
		///
		/// <remarks>	Not all datasource layers support asyc operations right now. If your are async you may be 
		///				able to get details in the IGW3DAsyncStatus where you can also cancel an 
		///				operation. Note the stream results may be on a different thread than than this thread.
		///				</remarks>
		///
		/// <param name="request"> TODO </param>
		/// <param name="streamobj"> TODO </param>
		///
		/// <returns>	The Success of the created resources. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult StreamEnvelopeAsync(IGW3DRequest* request, IGW3DRasterLayerEnvelopeStreamWPtr streamobj) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Cancels all Asynchronous resources. </summary>
		///
		/// <remarks>	Cancels and waits on all internal tasks to finish. After this call all
		///				there will be no more callbacks into IGW3DRasterLayerEnvelopeStream objects. 
		///				</remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void ShutDownAsyncStreams() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get the Legend if one exists for this raster layer.
		/// width hint and height hint will be used if the layer has an legend LOD capability.  </summary>
		///
		/// <param name="width_hint"> TODO </param>
		/// <param name="height_hint"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DImagePtr get_Legend(const unsigned width_hint=0, const unsigned height_hint=0) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get the Legend Title is one exists. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DStringPtr get_LegendTitle() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Puts the max number of time slices per Raster Layer. </summary>
		/// 
		/// <remarks>	Will be used within IGW3DRasterTimeController.
		///				Each time slice could potentially raise by a proportional factor the entire texture memory
		///				of a dataource. </remarks> 
		///
		/// <param name="max_slices"> TODO </param>
		///
		/// <returns>	if the parameter was clamped to 50. </returns>
		///
		/// <see cref="IGW3DGeoweb3dSDK::get_GW3DRasterTimeController"/>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult put_MaxNumberOfTimeSlices(unsigned max_slices) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the current max number of times slices per Raster Layer </summary>
		///
		/// <remarks>	Will be used within IGW3DRasterTimeController.
		///				Each time slice could potentially raise by a proportional factor the entire texture memory
		///				of a dataource. </remarks> 
		/// 
		/// <returns>	The max number of time slices allowed. </returns>
		///
		/// <see cref="IGW3DGeoweb3dSDK::get_GW3DRasterTimeController"/>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual unsigned get_MaxNumberOfTimeSlices() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Add filter regions to the Raster Layer </summary>
		///
		/// <remarks>	Filter regions are areas of interest, whose raster properties such as, pixel size
		///				may be different than the actual layer pixel size. The filter region raster properties
		///             will take precedence over the layer raster properties within the filtered region. In short
		///             a filter region can be considered as a sub-layer. This API has the following limitation 
		///             and will be redesigned in the future.
		///				1. Filter regions can only be added once to a layer, mean the API can only be called once.
		///                There is no support for adding a regions to the same layer multiple times.
		///             2. Filter regions once added cannot be removed. The layer will have to be removed and recreated. </remarks>
		///
		/// <param name="filter_regions"> TODO </param>
		/// <param name="num_regions"> TODO </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_FilterRegions(const IGW3DRasterLayerFilterRegion* filter_regions, const int num_regions) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the number of pixel along the x coordinate in EPSG 4326. </summary>
		///
		/// <returns>	The pixel width. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_ProjectedWidth() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the number of pixel along the y coordinate in EPSG 4326 </summary>
		///
		/// <returns>	The pixel height. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual int  get_ProjectedHeight() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the pixel size along the x coordinate in EPSG 4326. </summary>
		///
		/// <returns>	The pixel size (degrees). </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_ProjectedPixelSizeX() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the pixel size along the y coordinate in EPSG 4326. </summary>
		///
		/// <returns>	The pixel size (degrees). </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_ProjectedPixelSizeY() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the estimated metric size of the central pixel data in EPSG 4326 </summary>
		///
		/// <param name="vertical_dimension">	The central pixel metric width. </param>
		/// <param name="horizontal_dimension">	The central pixel metric height. </param>
		///
		/// <returns>	A Geoweb3d status code. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult get_EstimatedCentralPixelMetricDimensions(double& vertical_dimension, double& horizontal_dimension) const = 0;
	};
}