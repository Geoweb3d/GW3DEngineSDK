//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "../core/GW3DInterFace.h"

namespace Geoweb3d
{

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary> TODO </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    class IGW3DActiveVectorDataEvents
    {
    public:
        virtual ~IGW3DActiveVectorDataEvents() {}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="service"> TODO </param>
        /// <param name="ID"> TODO </param>
        /// <param name="geometry"> TODO </param>
        /// <param name="field_parms"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void OnData(const char* service, const char* ID, const GW3DGeometry* geometry, const Geoweb3d::IGW3DPropertyCollection* field_parms) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="operation"> TODO </param>
        /// <param name="msg"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void OnStatus(const char* operation, const char* msg) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="operation"> TODO </param>
        /// <param name="msg"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void ExceptionMsg(const char* operation, const char* msg) = 0;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// IGW3DWidgetEvents
    /// note, its expected when a driver writes to this, its expectation is that its from the main thread.
    /// Thus, if you have multiple threads, its suggested you buffer those messages until your main thread
    /// is entered to where you can then write out your buffered messages
    /// </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    class IGW3DWidgetEvents
    {
    public:
        virtual ~IGW3DWidgetEvents() {}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="operation"> TODO </param>
        /// <param name="msg"> TODO </param>
        /// <param name="id"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void OnWidgetsFatal(const char* operation, const char* msg, unsigned id) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="operation"> TODO </param>
        /// <param name="msg"> TODO </param>
        /// <param name="id"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void OnWidgetsWarning(const char* operation, const char* msg, unsigned id) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="operation"> TODO </param>
        /// <param name="msg"> TODO </param>
        /// <param name="id"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void OnWidgetsInfo(const char* operation, const char* msg, unsigned id) = 0;
    };

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary> TODO </summary>
    ////////////////////////////////////////////////////////////////////////////////////////////////////

    class IGW3DActiveVectorData : public IGW3DIBaseObject
    {
    public:
        virtual ~IGW3DActiveVectorData() {}

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="hostname"> TODO </param>
        /// <param name="port"> TODO </param>
        /// <param name="username"> TODO </param>
        /// <param name="password"> TODO </param>
        /// <param name="pcallback"> TODO </param>
        ///
        /// <returns> TODO </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual bool Connect(const char* hostname, int port, const char* username, const char* password, IGW3DActiveVectorDataEvents* pcallback) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <returns> TODO </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual int GetNumOfServices() = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="index"> TODO </param>
        ///
        /// <returns> TODO </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual const char* GetServiceName(int index) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="service"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void SubscribeToService(const char* service) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="service"> TODO </param>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual void UnSubscribeToService(const char* service) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <returns> TODO </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual bool isConnected() = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="service"> TODO </param>
        ///
        /// <returns> TODO </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual const Geoweb3d::IGW3DDefinitionCollection* GetServiceFieldProperties(const char* service) = 0;

        ////////////////////////////////////////////////////////////////////////////////////////////////////
        /// <summary> TODO </summary>
        ///
        /// <param name="service"> TODO </param>
        ///
        /// <returns> TODO </returns>
        ////////////////////////////////////////////////////////////////////////////////////////////////////

        virtual Geoweb3d::GeometryType GetServiceGeometryType(const char* service) = 0;
    };

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> TODO </summary>
///
/// <param name="interface_version"> TODO </param>
///
/// <returns> TODO </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

GW3D_DLL IGW3DActiveVectorData* CreateInstance( unsigned interface_version = GEOWEB3D_INTERFACE_VERSION );

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> TODO </summary>
///
/// <param name="p"> TODO </param>
///
/// <returns> TODO </returns>
////////////////////////////////////////////////////////////////////////////////////////////////////

GW3D_DLL void DestroyInstance( IGW3DActiveVectorData *p );

}//end namespace