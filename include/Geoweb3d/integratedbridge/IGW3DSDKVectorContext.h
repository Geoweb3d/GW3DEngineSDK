//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include <Geoweb3d/core/GW3DInterFace.h>
#include <Geoweb3dCore/Geoweb3dEngine.h>
#include <Geoweb3dCore/Geoweb3dTypes.h>

namespace Geoweb3d
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> TODO </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct  GW3D_DLL IGW3DSDKVectorContext
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="vectordrivername"> TODO </param>
		/// <param name="data_source_name"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult close_GW3DDataSource(const char* vectordrivername, const char* data_source_name) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="vector_driver_name"> TODO </param>
		/// <param name="data_source_name"> TODO </param>
		/// <param name="properties"> TODO </param>
		/// <param name="res"> TODO </param>
		///
		/// <returns></returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DVectorLayerCollection* open_IGW3DVectorLayerCollection(const char* vector_driver_name, const char* data_source_name, const IGW3DPropertyCollectionPtr& properties, GW3DResult& res) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="vector_driver_name"> TODO </param>
		/// <param name="data_source_name"> TODO </param>
		/// <param name="res"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DVectorLayerCollection* create_IGW3DVectorLayerCollection(const char* vector_driver_name, const char* data_source_name, GW3DResult& res) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DVectorRepresentationDriverCollection* get_IGW3DVectorRepresentationDriverCollection() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary> TODO </summary>
		///
		/// <param name="rep"> TODO </param>
		///
		/// <returns> TODO </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual GW3DResult add_IGW3DVectorRepresentationToIntersectionTest(IGW3DVectorRepresentationWPtr rep) = 0;

	};
}
