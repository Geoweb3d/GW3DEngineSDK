//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "core/GW3DGUIInterFace.h"

/* Primary namespace */
namespace Geoweb3d
{
namespace GUI
{

	struct IGW3DGUI2DIntersection;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Collection of 2D intersections. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DGUI2DIntersectionCollection : public IGW3DCollection< IGW3DGUI2DIntersection* >
	{
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A 2D intersection report for a single representation. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DGUI2DIntersection
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Values that represent the class of representation in this intersection. </summary>
		///
		/// <remarks>	Use this enum to determine which function to use to retrieve the representation
		/// 			that was intersection. </remarks>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		enum IntersectionRepresentationClass
		{
			/// <summary>	A Vector Representation. </summary>
			VectorRepresentation = 0,
			/// <summary>	A Basic Vector Representation. </summary>
			VectorRepresentationBasic,
			/// <summary>	Do Not Use. </summary>
			IRS_MAX = 0xff
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Query whether the intersection is with a standard or basic representation. </summary>
		///
		///	<remarks>	If this function returns VectorRepresentation, use the get_VectorRepresentation
		///				API.  If this function returns VectorRepresentationBasic, use the 
		///				get_VectorRepresentationBasic API.
		///
		/// <returns>	The vector layer representation. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IntersectionRepresentationClass get_RepresentationClass() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets vector layer representation. </summary>
		///
		/// <returns>	The vector layer representation. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUIVectorRepresentationWPtr get_VectorRepresentation() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets basic vector layer representation. </summary>
		///
		/// <returns>	The basic vector layer representation. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUIVectorRepresentationBasicWPtr get_VectorRepresentationBasic() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets 2D intersection detail collection. </summary>
		///
		/// <returns>	The 2D intersection detail collection. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUI2DIntersectionDetailCollection *get_IntersectionDetailCollection() = 0;
	};

}
}