//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "core/GW3DGUIInterFace.h"

namespace Geoweb3d
{
namespace GUI
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Collection of vector representation drivers. </summary>
	///
	/// <remarks>	The collection of all representation drivers available for viewing and creating 
	/// 			representations of vector layers. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DGUIVectorRepresentationDriverCollection : public IGW3DCollection< IGW3DGUIVectorRepresentationDriverWPtr >
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a colored line representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dColoredLineRepresentation "ColoredLine"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a light point representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////
		
		#define gw3dLightPointRepresentation "LightPoint"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a 3D model representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dModelRepresentation "Model"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines an extruded polygon representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dExtrudedPolygonRepresentation "ExtrudedPolygon"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a box representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dBoxRepresentation "Box"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a cone representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dConeRepresentation "Cone"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a cylinder representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dCylinderRepresentation "Cylinder"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a plane representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dPlaneRepresentation "Plane"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a pyramid representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dPyramidRepresentation "Pyramid"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a sphere representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dSphereRepresentation "Sphere"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a projected image representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dProjectedImageRepresentation "ProjectedImage"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a point cloud representation (for LAS lidar). </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dPointCloudRepresentation "PointCloud"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines a water representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dWaterRepresentation "Water"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	A macro that defines an icon representation. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		#define gw3dIconRepresentation "Icon"

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the named driver. </summary>
		///
		/// <remarks>	Get the driver with the given name. </remarks>
		///
		/// <param name="name">	The name of the driver. </param>
		///
		/// <returns>	The driver. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUIVectorRepresentationDriverWPtr get_Driver( const char *name ) = 0;
		
	};


}
}



