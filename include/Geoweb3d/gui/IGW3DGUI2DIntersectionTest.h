//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "core/GW3DGUIInterFace.h"

/* Primary namespace */
namespace Geoweb3d
{
namespace GUI
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	2D intersection test. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct  IGW3DGUI2DIntersectionTest
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the enabled state. </summary>
		///
		/// <param name="enable">	true to enable, false to disable. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_Enabled( bool enable) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the enabled state. </summary>
		///
		/// <returns>	true if it succeeds, false if it fails. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool get_Enabled( ) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Sets the window coordinates to query. </summary>
		///
		/// <param name="window_x">	The window x coordinate. </param>
		/// <param name="window_y">	The window y coordinate. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void put_WindowCoordinates( int window_x, int window_y ) = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Used to add and remove basic representations to participate in the analysis. </summary>
		///
		/// <returns>	the vector layer representation collection. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUIVectorRepresentationBasicHelperCollection * get_VectorRepresentationBasicCollection() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Used to add and remove representations to participate in the analysis. </summary>
		///
		/// <returns>	the vector layer representation collection. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUIVectorRepresentationHelperCollection * get_VectorRepresentationCollection() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Container of intersection results from the last time the scene was drawn </summary>
		///
		/// <returns>	null if it fails, else the intersection collection. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUI2DIntersectionCollection * get_IntersectionCollection() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Get the frame time stamp that the intersection results were last updated </summary>
		///
		///	<remarks>	The master frame time stamp is incremented by 1 every frame. </remarks>
		///
		/// <returns>	the frame time stamp. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual unsigned get_FrameTimeStamp() const= 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Check if test is valid. </summary>
		///
		/// <returns>	true if it succeeds, false if it fails. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool	get_IsValid() const = 0;
	};

}
}