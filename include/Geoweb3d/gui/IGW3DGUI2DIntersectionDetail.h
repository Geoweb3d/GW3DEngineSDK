//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "core/GW3DInterFace.h"

/* Primary namespace */
namespace Geoweb3d
{
namespace GUI
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	Collection of 2D intersection details. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DGUI2DIntersectionDetailCollection : public IGW3DCollection< IGW3DGUI2DIntersectionDetail* >
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Values that represent SortType. </summary>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		enum SortType
		{
			/// <summary> Ascending distance (near to far) </summary>
			Ascending  = 0,
			/// <summary> Descending distance (far to near) </summary>
			Descending = 1,
			/// <summary>	Do Not Use. </summary>
			SortMax = 0xFFFF
		};

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Executes the sort operation. </summary>
		///
		/// <param name="sortype">	The sort type. </param>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual void do_Sort( SortType sortype ) = 0;
	};

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A 2D intersection detail. </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DGUI2DIntersectionDetail
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets object identifier. </summary>
		///
		/// <returns>	The object identifier. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const int64_t get_ObjectID() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the distance to the eye. </summary>
		///
		/// <returns>	The intersection distance. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual double get_Distance() const = 0; //false is descending

	};
}
}