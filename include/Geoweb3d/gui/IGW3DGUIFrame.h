//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include "core/GW3DGUIInterFace.h"
#include <Geoweb3dCore/Geoweb3dTypes.h>

/* Primary namespace */
namespace Geoweb3d
{
namespace GUI
{

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	A Shelf Frame. </summary>
	///
	/// <remarks>	A single frame on a shelf at the top of the Geoweb3d user interface. </remarks>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	struct IGW3DGUIFrame 
	{

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Windows handle of the frame's drawable area. </summary>
		///
		/// <remarks>	The operating system window handle for the drawable area of the frame.
		///				This handle is used for drawing your UI controls onto the frame and for
		///				processing operating system events.  This may be cast to an HWND.
		///				
		///				This will return null if called on any native Geoweb3d frame.  </remarks>
		///
		/// <returns>	A window handle. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual OSWinHandle get_AttachHandle() = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the unique id of the frame. </summary>
		/// 
		/// <remarks>	The id is unique to the shelf the frame is a member of.  Some generic native 
		/// 			Geoweb3d Desktop frames can be shared across multiple frames. 
		///
		/// <returns>	null if it fails, else the id. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual const char * get_Id() const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the visibility. </summary>
		///
		/// <returns>	true if it is visible, false if it not visible. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool get_Visible( ) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the enabled state. </summary>
		///
		/// <returns>	true if it is enabled, false if it is disabled. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual bool get_Enabled( ) const = 0;

		////////////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>	Gets the shelf to which the frame belongs. </summary>
		///
		/// <returns>	the shelf. </returns>
		////////////////////////////////////////////////////////////////////////////////////////////////////

		virtual IGW3DGUIShelfWPtr get_Shelf() = 0;

	};

}
}



