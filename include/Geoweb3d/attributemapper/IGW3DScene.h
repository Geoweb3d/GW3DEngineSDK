//////////////////////////////////////////////////////////////////////////////
//
// Geoweb3d SDK
// Copyright (c) Geoweb3d, 2008-2023, all rights reserved.
//
// This code can be used only under the rights granted to you by the specific
// Geoweb3d SDK license under which the SDK provided.
//
//////////////////////////////////////////////////////////////////////////////

#pragma once
#include <Geoweb3d/core/GW3DInterFace.h>

/* Primary namespace */
namespace Geoweb3d
{

////////////////////////////////////////////////////////////////////////////////////////////////////
/// <summary> Scene. </summary>
////////////////////////////////////////////////////////////////////////////////////////////////////

struct IGW3DScene
{
	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	This will return filename of the scene. </summary>
	///
	/// <returns>	The filename. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual const char* get_Filename() const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	This will return the Envelope, if the scene is in a WGS84 coordinate system. </summary>
	///
	/// <remarks>	The envelope's get_IsNull function should be used to infer the state of the returned
	///				envelope. If a valid envelope is returned, then the bound will encapsulate all data 
	///				that is in the WGS84 coordinate system.	</remarks>
	///
	/// <returns>	The envelope. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual GW3DEnvelope get_Envelope() const = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>	This will return the scene's first camera location</summary>
	/// 
	/// <remarks>	If the scene file does not contain a camera, then the position of the first 
	///				feature in the first listed vector file will be used to derive the camera location.
	//				If the scene file does not contain vector data, then the raster data will be used
	//				to derive a camera location, preferring elevation before imagery. If no data is in
	//				the scene file then the returned object will be expired.  </remarks>
	///
	/// <returns>	The eye point position and orientation object. </returns>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual const IGW3DPositionOrientationWPtr get_Camera() = 0;

	////////////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary> Forces a refresh of all representations on vector layers </summary>
	////////////////////////////////////////////////////////////////////////////////////////////////////

	virtual void Refresh() = 0;
};
}